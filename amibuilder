#!/usr/bin/env bash

#  AMIBUILDER - http://github.com/thewoolleyman/amibuilder
#  Script to automate building a customized Ubuntu EC2 EBS boot AMI, based on Eric Hammond's tutorial at http://alestic.com/2010/01/ec2-ebs-boot-ubuntu
#  Copyright (c) 2010 Chad Woolley - The MIT License

config() {
  # http://alestic.com/2009/11/ec2-credentials

  if [ -e ~/.amibuilderrc ]; then
    . ~/.amibuilderrc
  fi

  # EC2 Tools
  ec2home=${EC2_HOME:?Please set EC2_HOME to the path of your EC2 API Tools (http://developer.amazonwebservices.com/connect/entry.jspa?externalID=351&categoryID=88)}
  ec2amitoolhome=${EC2_AMITOOL_HOME:?Please set EC2_AMITOOL_HOME to the path of your EC2 AMI Tools (http://developer.amazonwebservices.com/connect/entry.jspa?externalID=368&categoryID=88)}
  export PATH=$ec2home/bin:$ec2amitoolhome/bin:$PATH

  # EC2 Credentials
  privatekey=${EC2_PRIVATE_KEY:?Please set EC2_PRIVATE_KEY to the path of your private key (See X.509 Certificates at https://aws-portal.amazon.com/gp/aws/developer/account/index.html?action=access-key#access_credentials)}
  cert=${EC2_CERT:?Please set EC2_CERT to the path of your cert (See X.509 Certificates at https://aws-portal.amazon.com/gp/aws/developer/account/index.html?action=access-key#access_credentials)}
  keypair=${EC2_KEYPAIR:?Please set EC2_KEYPAIR to the path of your keypair private key (https://console.aws.amazon.com/ec2/home#c=EC2&s=KeyPairs)}
  keypairname=${EC2_KEYPAIR_NAME:?Please set EC2_KEYPAIR_NAME to the name of your keypair (https://console.aws.amazon.com/ec2/home#c=EC2&s=KeyPairs)}

  # AMI Builder Settings
  instancetype=${AMIBUILDER_INSTANCE_TYPE:?Please set AMIBUILDER_INSTANCE_TYPE to the type of instance you want, e.g. m1.small for 32 bit and m1.large for 64 bit (See http://aws.amazon.com/ec2/instance-types/)}
  newamiprefix=${AMIBUILDER_NEW_AMI_PREFIX:?Please set AMIBUILDER_NEW_AMI_PREFIX to a string with no spaces.  This string will be prepended to the name of your new AMI}
}

run_instance() {
  if [[ "$instancetype" = "m1.small" || "$instancetype" = "c1.medium" ]] ; then
    ami_to_run_build='ami-1515f67c' # 32 bit
  else
    ami_to_run_build='ami-ab15f6c2' # 64 bit
  fi
  
  echo "Running instance to perform AMI build: ami=$ami_to_run_build, instancetype=$instancetype ..."
  instanceid=$(ec2-run-instances \
    --private-key "$privatekey" \
    --cert "$cert" \
    --key "$keypairname" \
    --availability-zone us-east-1a \
    --instance-type "$instancetype" \
    "$ami_to_run_build" |
    egrep ^INSTANCE | cut -f2)
  echo "Started instance: instanceid=$instanceid"
  instanceid=$instanceid
}

get_host() {
  echo "Finding hostname for $instanceid ..."
  while host=$(ec2-describe-instances \
    --private-key "$privatekey" \
    --cert "$cert" \
     "$instanceid" | \
    egrep ^INSTANCE | cut -f4) && test -z $host; do echo -n .; sleep 1; done
  echo; echo "Waiting for ssh connectivity to $host ..."
  while ssh_up=$(ssh -i $keypair ubuntu@$host "echo ssh up"); test "$ssh_up" != "ssh up"; do
    echo "SSH connect response from $host: $ssh_up"
    echo "Trying to SSH to $host again..."
    sleep 3
  done
  echo
}

upload_credentials() {
  echo "Uploading EC2 credentials for build to $host ..."
  rsync \
    --rsh="ssh -i $keypair" \
    --rsync-path="sudo rsync" \
    $privatekey \
    ubuntu@$host:/mnt/

  rsync \
    --rsh="ssh -i $keypair" \
    --rsync-path="sudo rsync" \
    $cert \
    ubuntu@$host:/mnt/

  echo "Setting ownership of credentials ..."
  ssh -i $keypair ubuntu@$host "sudo chown ubuntu /mnt/{cert,pk}*"
}

upgrade_tools() {
  echo "Upgrading EC2 tools on $host ..."
  ssh -i $keypair \
    ubuntu@$host \
  'export DEBIAN_FRONTEND=noninteractive && \
  echo "deb http://ppa.launchpad.net/ubuntu-on-ec2/ec2-tools/ubuntu karmic main" | \
    sudo tee /etc/apt/sources.list.d/ubuntu-on-ec2-ec2-tools.list && \
  sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9EE6D873 && \
  sudo apt-get update && \
  sudo -E apt-get dist-upgrade -y && \
  sudo -E apt-get install -y ec2-api-tools'
}

__remote_variable_setup() {
  remote_variable_setup='
  codename=karmic
  release=9.10
  tag=server
  if [ $(uname -m) = "x86_64" ]; then
    arch=x86_64
    arch2=amd64
    ebsopts="--kernel=aki-fd15f694 --ramdisk=ari-c515f6ac"
    ebsopts="$ebsopts --block-device-mapping /dev/sdb=ephemeral0"
  else
    arch=i386
    arch2=i386
    ebsopts="--kernel=aki-5f15f636 --ramdisk=ari-0915f660"
    ebsopts="$ebsopts --block-device-mapping /dev/sda2=ephemeral0"
  fi
  imagesource=http://uec-images.ubuntu.com/releases/$codename/release/unpacked/ubuntu-$release-$tag-uec-$arch2.img.tar.gz
  image=/mnt/$codename-$tag-uec-$arch2.img
  imagedir=/mnt/$codename-uec-$arch2
  '
}

__build_image() {
  echo "Building base image on $host in $imagedir from $imagesource ..."
  ssh -i $keypair \
    ubuntu@$host \
  "$remote_variable_setup"'
  wget --progress=dot:mega -O- $imagesource |
    sudo tar xzf - -C /mnt
  sudo mkdir -p $imagedir
  sudo mount -o loop $image $imagedir


  # Allow network access from chroot environment
  sudo cp /etc/resolv.conf $imagedir/etc/
  # Fix what I consider to be a bug in vmbuilder
  sudo rm -f $imagedir/etc/hostname
  # Add multiverse
  sudo perl -pi -e '\''s%(universe)$%$1 multiverse%'\'' \
    $imagedir/etc/ec2-init/templates/sources.list.tmpl
  # Add Alestic PPA for runurl package (handy in user-data scripts)
  echo "deb http://ppa.launchpad.net/alestic/ppa/ubuntu karmic main" |
    sudo tee $imagedir/etc/apt/sources.list.d/alestic-ppa.list
  sudo chroot $imagedir \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BE09C571
  # Add ubuntu-on-ec2/ec2-tools PPA for updated ec2-ami-tools
  echo "deb http://ppa.launchpad.net/ubuntu-on-ec2/ec2-tools/ubuntu karmic main" |
    sudo tee $imagedir/etc/apt/sources.list.d/ubuntu-on-ec2-ec2-tools.list
  sudo chroot $imagedir \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9EE6D873
  # Upgrade the system and install packages
  sudo chroot $imagedir mount -t proc none /proc
  sudo chroot $imagedir mount -t devpts none /dev/pts
  sudo touch $imagedir/usr/sbin/policy-rc.d
  sudo chown ubuntu $imagedir/usr/sbin/policy-rc.d
  sudo cat <<EOF > $imagedir/usr/sbin/policy-rc.d
  #!/bin/sh
  exit 101
EOF
  chmod 755 $imagedir/usr/sbin/policy-rc.d
  export DEBIAN_FRONTEND=noninteractive
  sudo chroot $imagedir apt-get update

  sudo -E chroot $imagedir /usr/bin/env LANGUAGE=en_US.UTF-8 LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 apt-get install -y language-pack-en-base

  sudo -E chroot $imagedir apt-get dist-upgrade -y &&
  sudo -E chroot $imagedir apt-get install -y runurl ec2-ami-tools

  # additional packages for building and common dependencies
  sudo -E chroot $imagedir apt-get install -y build-essential zlib1g-dev libreadline5-dev
  '
}

__custom_setup() {
  # TODO:  Execute '$AMIBUILDER_CUSTOM_SETUP_COMMANDS'
  echo "Performing custom setup on $host using script at $AMIBUILDER_CUSTOM_SETUP_URL ..."
  ssh -i $keypair \
    ubuntu@$host \
  "$remote_variable_setup"'
  sudo chroot $imagedir wget --progress=dot -O /home/ubuntu/amibuilder_custom_setup $AMIBUILDER_CUSTOM_SETUP_URL
  sudo chroot $imagedir chmod a+x /home/ubuntu/amibuilder_custom_setup
  sudo chroot $imagedir /home/ubuntu/amibuilder_custom_setup
  '
}

__copy_image_to_ami() {
  echo "Building and registering AMI..."
  ssh -i $keypair \
    ubuntu@$host \
  "$remote_variable_setup"'
  sudo chroot $imagedir umount /proc
  sudo chroot $imagedir umount /dev/pts
  sudo rm -f $imagedir/usr/sbin/policy-rc.d


  size=15 # root disk in GB
  now=$(date +%Y%m%d-%H%M)
  prefix='$newamiprefix'-ubuntu-$release-$codename-$tag-$arch-$now
  description="Ubuntu $release $codename $tag $arch $now"
  export EC2_CERT=$(echo /mnt/cert-*.pem)
  export EC2_PRIVATE_KEY=$(echo /mnt/pk-*.pem)
  volumeid=$(ec2-create-volume --size $size --availability-zone us-east-1a |
    cut -f2)
  instanceid=$(wget --progress=dot -qO- http://instance-data/latest/meta-data/instance-id)
  ec2-attach-volume --device /dev/sdi --instance "$instanceid" "$volumeid"
  while [ ! -e /dev/sdi ]; do echo -n .; sleep 1; done
  sudo mkfs.ext3 -F /dev/sdi
  ebsimage=$imagedir-ebs
  sudo mkdir $ebsimage
  sudo mount /dev/sdi $ebsimage
  sudo tar -cSf - -C $imagedir . | sudo tar xvf - -C $ebsimage
  sudo umount $ebsimage
  ec2-detach-volume "$volumeid"
  snapshotid=$(ec2-create-snapshot "$volumeid" | cut -f2)
  ec2-delete-volume "$volumeid"
  while ec2-describe-snapshots "$snapshotid" | grep -q pending
    do echo -n .; sleep 1; done
  newami=$(ec2-register \
    --architecture $arch \
    --name "$prefix" \
    --description "$description" \
    $ebsopts \
    --snapshot "$snapshotid")
  echo "NEW AMI REGISTERED: AMI ID=$newami, EBS ID=$volumeid, EBS SNAPSHOT ID=$snapshotid, PREFIX=$prefix, DESCRIPTION=$description"
  '
}

create_ebs_ami() {
  __remote_variable_setup
  __build_image
  if [[ -z $AMIBUILDER_CUSTOM_SETUP_URL ]] ; then
    __run_custom_setup
  fi
  __copy_image_to_ami
}

terminate_instance() {
  echo "terminating $instanceid"
  result=$(ec2-terminate-instances   \
    --private-key "$privatekey" \
    --cert "$cert" \
    "$instanceid")
  echo "$result"
}

config
run_instance
get_host
upload_credentials
upgrade_tools
create_ebs_ami
terminate_instance
