#!/usr/bin/env bash

#  AMIBUILDER - http://github.com/thewoolleyman/amibuilder
#  Script to automate building a customized Ubuntu EC2 EBS boot AMI, based on Eric Hammond's tutorial at http://alestic.com/2010/01/ec2-ebs-boot-ubuntu
#  Copyright (c) 2010 Chad Woolley - The MIT License

set -o noclobber
set -e
set -o pipefail
set -o nounset
trap 'echo AMIBUILDER: error on line $LINENO' ERR

config() {
  # http://alestic.com/2009/11/ec2-credentials
  
  amibuilder_config=${AMIBUILDER_CONFIG:-~/.amibuilderrc}
  if [ -e $amibuilder_config ]; then
    source $amibuilder_config
  fi

  # EC2 Tools
  ec2home=${EC2_HOME:?Please set EC2_HOME to the path of your EC2 API Tools (http://developer.amazonwebservices.com/connect/entry.jspa?externalID=351&categoryID=88)}
  ec2amitoolhome=${EC2_AMITOOL_HOME:?Please set EC2_AMITOOL_HOME to the path of your EC2 AMI Tools (http://developer.amazonwebservices.com/connect/entry.jspa?externalID=368&categoryID=88)}
  export PATH=$ec2home/bin:$ec2amitoolhome/bin:$PATH

  # EC2 Credentials
  privatekey=${EC2_PRIVATE_KEY:?Please set EC2_PRIVATE_KEY to the path of your private key (See X.509 Certificates at https://aws-portal.amazon.com/gp/aws/developer/account/index.html?action=access-key#access_credentials)}
  cert=${EC2_CERT:?Please set EC2_CERT to the path of your cert (See X.509 Certificates at https://aws-portal.amazon.com/gp/aws/developer/account/index.html?action=access-key#access_credentials)}
  keypair=${EC2_KEYPAIR:?Please set EC2_KEYPAIR to the path of your keypair private key (https://console.aws.amazon.com/ec2/home#c=EC2&s=KeyPairs)}
  keypairname=${EC2_KEYPAIR_NAME:?Please set EC2_KEYPAIR_NAME to the name of your keypair (https://console.aws.amazon.com/ec2/home#c=EC2&s=KeyPairs)}

  # AMI Builder Settings
  instancetype=${AMIBUILDER_INSTANCE_TYPE:?Please set AMIBUILDER_INSTANCE_TYPE to the type of instance you want, e.g. m1.small for 32 bit and m1.large for 64 bit (See http://aws.amazon.com/ec2/instance-types/)}
  newamiprefix=${AMIBUILDER_NEW_AMI_PREFIX:?Please set AMIBUILDER_NEW_AMI_PREFIX to a string with no spaces.  This string will be prepended to the name of your new AMI}
  AMIBUILDER_CUSTOM_SETUP_URL=${AMIBUILDER_CUSTOM_SETUP_URL:-''}
  AMIBUILDER_CUSTOM_SETUP_VARS=${AMIBUILDER_CUSTOM_SETUP_VARS:-''}

  # AMIBUILDER debugging options
  AMIBUILDER_NO_BUILD=${AMIBUILDER_CONFIG:-false}
  AMIBUILDER_HOST=${AMIBUILDER_HOST:-''}
  AMIBUILDER_NO_UPLOAD_CREDENTIALS=${AMIBUILDER_NO_UPLOAD_CREDENTIALS:-false}
  AMIBUILDER_NO_TERMINATE_INSTANCE=${AMIBUILDER_NO_TERMINATE_INSTANCE:-false}
  AMIBUILDER_NO_BUILD_IMAGE=${AMIBUILDER_NO_BUILD_IMAGE:-false}
  AMIBUILDER_NO_CUSTOM_SETUP=${AMIBUILDER_NO_CUSTOM_SETUP:-false}
  AMIBUILDER_NO_COPY_IMAGE_TO_AMI=${AMIBUILDER_NO_COPY_IMAGE_TO_AMI:-false}
}

run_instance() {
  if [[ "$instancetype" = "m1.small" || "$instancetype" = "c1.medium" ]] ; then
    ami_to_run_build='ami-2d4aa444' # 32 bit
  else
    ami_to_run_build='ami-fd4aa494' # 64 bit
  fi
  
  echo "AMIBUILDER: Running instance to perform AMI build: ami=$ami_to_run_build, instancetype=$instancetype ..."
  instanceid=$(ec2-run-instances \
    --private-key "$privatekey" \
    --cert "$cert" \
    --key "$keypairname" \
    --availability-zone us-east-1a \
    --instance-type "$instancetype" \
    "$ami_to_run_build" |
    egrep ^INSTANCE | cut -f2)
  echo "AMIBUILDER: Started instance: instanceid=$instanceid"
  instanceid=$instanceid
}

get_host() {
  echo "AMIBUILDER: Finding hostname for $instanceid ..."
  while host=$(ec2-describe-instances \
    --private-key "$privatekey" \
    --cert "$cert" \
     "$instanceid" | \
    egrep ^INSTANCE | cut -f4) && test -z $host; do echo -n .; sleep 1; done
  echo
  echo "AMIBUILDER: Got hostname $host for instance $instanceid"
  echo "AMIBUILDER: Waiting for ssh connectivity to $host ..."
  while ssh_up=$(ssh -i $keypair ubuntu@$host "echo ssh up"); test "$ssh_up" != "ssh up"; do
    echo "AMIBUILDER: SSH connect response from $host: $ssh_up"
    echo "AMIBUILDER: Trying to SSH to $host again..."
    sleep 3
  done
  echo
}

upload_credentials() {
  echo "AMIBUILDER: Uploading EC2 credentials for build to $host ..."
  rsync \
    --rsh="ssh -i $keypair" \
    --rsync-path="sudo rsync" \
    $privatekey \
    ubuntu@$host:/mnt/

  rsync \
    --rsh="ssh -i $keypair" \
    --rsync-path="sudo rsync" \
    $cert \
    ubuntu@$host:/mnt/

  echo "AMIBUILDER: Setting ownership of credentials ..."
  ssh -i $keypair ubuntu@$host "sudo chown ubuntu /mnt/{cert,pk}*"
}

remote_variable_setup() {
  remote_variable_setup='
  imagesource='$imagesource'
  image='$image'
  imagedir='$imagedir'
  '
}

variable_setup() {
  codename=lucid
  release=10.04
  tag=server
  if [[ $(run 'uname -m') = "x86_64" ]] ; then
    arch=x86_64
    arch2=amd64
    ebsopts="--kernel=aki-0b4aa462 --ramdisk=ari-c515f6ac"
    ebsopts="$ebsopts --block-device-mapping /dev/sdb=ephemeral0"
  else
    arch=i386
    arch2=i386
    ebsopts="--kernel=aki-754aa41c --ramdisk=ari-0915f660"
    ebsopts="$ebsopts --block-device-mapping /dev/sda2=ephemeral0"
  fi
  imagesource=http://uec-images.ubuntu.com/releases/$codename/release/unpacked/ubuntu-$release-$tag-uec-$arch2.img.tar.gz
  image=/mnt/$codename-$tag-uec-$arch2.img
  imagedir=/mnt/$codename-uec-$arch2  
}

build_image() {
  echo "AMIBUILDER: Building base image on $host ..."
  run "wget --progress=dot:mega -O- $imagesource | sudo tar xzf - -C /mnt"
  run "sudo mkdir -p $imagedir"
  run "sudo mount -o loop=/dev/loop4 $image $imagedir"
  run "sudo resize2fs /dev/loop4 5G"

  # Allow network access from chroot environment
  run "sudo cp /etc/resolv.conf $imagedir/etc/"
  # Fix what I consider to be a bug in vmbuilder
  run "sudo rm -f $imagedir/etc/hostname"
  # Add multiverse
  run "sudo perl -pi -e 's%(universe)$%\$1 multiverse%' $imagedir/etc/cloud/templates/sources.list.tmpl"
  # Add Alestic PPA for runurl package (handy in user-data scripts)
  run "echo \"deb http://ppa.launchpad.net/alestic/ppa/ubuntu lucid main\" | \
      sudo tee $imagedir/etc/apt/sources.list.d/alestic-ppa.list"
  run "sudo chroot $imagedir su - ubuntu -c \"touch /home/ubuntu/.bash_history\""
  run "sudo chroot $imagedir apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BE09C571"
  # Upgrade the system and install packages
  run "sudo chroot $imagedir mount -t proc none /proc"
  run "sudo chroot $imagedir mount -t devpts none /dev/pts"
  run "sudo touch $imagedir/usr/sbin/policy-rc.d"
  run "sudo chown ubuntu $imagedir/usr/sbin/policy-rc.d"
  run "sudo cat <<EOF > $imagedir/usr/sbin/policy-rc.d
  #!/bin/sh
  exit 101
EOF
"
  run "chmod 755 $imagedir/usr/sbin/policy-rc.d"
  run "export DEBIAN_FRONTEND=noninteractive &&
    sudo chroot $imagedir apt-get update &&
    sudo -E chroot $imagedir /usr/bin/env LANGUAGE=en_US.UTF-8 LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 apt-get install -y language-pack-en-base &&
    sudo -E chroot $imagedir apt-get dist-upgrade -y &&
    sudo -E chroot $imagedir apt-get install -y runurl cloud-utils &&
    sudo -E chroot $imagedir apt-get install -y build-essential zlib1g-dev libreadline5-dev"
}

custom_setup() {
  echo "AMIBUILDER: Performing custom setup on $host using script at $AMIBUILDER_CUSTOM_SETUP_URL ..."
  custom_setup_url=$AMIBUILDER_CUSTOM_SETUP_URL
  custom_setup_script=/home/ubuntu/${custom_setup_url##*/}
  echo "AMIBUILDER: Downloading custom setup script $custom_setup_script from $custom_setup_url ..."
  echo "AMIBUILDER: sudo chroot $imagedir bash -c \"curl -f -o /home/ubuntu/$custom_setup_script $custom_setup_url\""
  run "sudo chroot $imagedir su - ubuntu -c \"curl -f -o $custom_setup_script $custom_setup_url\""
  while exists=$(run "sudo chroot $imagedir su - ubuntu -c \"if [[ -e $custom_setup_script ]] ; then echo exists; fi\""); test "$exists" != "exists" ; do
    echo "AMIBUILDER: Waiting for curl to finish downloading $custom_setup_script from $custom_setup_url ..."
    sleep 3
  done
  echo "AMIBUILDER: $custom_setup_url successfully downloaded to $custom_setup_script ..."

  echo "AMIBUILDER: Changing permissions on $custom_setup_script ..."
  run "sudo chroot $imagedir chmod a+x $custom_setup_script"
  echo "AMIBUILDER: Running $custom_setup_script ..."
  echo "sudo chroot $imagedir sudo -u ubuntu -i bash -c \"cd /home/ubuntu && $AMIBUILDER_CUSTOM_SETUP_VARS $custom_setup_script\""
  run "sudo chroot $imagedir sudo -u ubuntu -i bash -c \"cd /home/ubuntu && $AMIBUILDER_CUSTOM_SETUP_VARS $custom_setup_script\""
}

copy_image_to_ami() {
  echo "AMIBUILDER: Building and registering AMI on  $host ..."
  run "sudo chroot $imagedir umount /proc"
  run "sudo chroot $imagedir umount /dev/pts"
  run "sudo rm -f $imagedir/usr/sbin/policy-rc.d"

  run $remote_variable_setup'
  size=15 # root disk in GB
  now=$(date +%Y%m%d-%H%M)
  prefix='$newamiprefix'-ubuntu-$release-$codename-$tag-$arch-$now
  description="Ubuntu $release $codename $tag $arch $now"
  export EC2_CERT=$(echo /mnt/cert-*.pem)
  export EC2_PRIVATE_KEY=$(echo /mnt/pk-*.pem)
  volumeid=$(ec2-create-volume --size $size --availability-zone us-east-1a | cut -f2)
  instanceid=$(wget --progress=dot -qO- http://instance-data/latest/meta-data/instance-id)
  ec2-attach-volume --device /dev/sdi --instance "$instanceid" "$volumeid"
  while [ ! -e /dev/sdi ]; do echo -n .; sleep 1; done
  sudo mkfs.ext3 -F /dev/sdi
  ebsimage=$imagedir-ebs
  sudo mkdir $ebsimage
  sudo mount /dev/sdi $ebsimage
  sudo tar -cSf - -C $imagedir . | sudo tar xvf - -C $ebsimage
  sudo umount $ebsimage
  ec2-detach-volume "$volumeid"
  snapshotid=$(ec2-create-snapshot "$volumeid" | cut -f2)
  ec2-delete-volume "$volumeid"
  while ec2-describe-snapshots "$snapshotid" | grep -q pending
    do echo -n .; sleep 1; done
  newami=$(ec2-register \
    --architecture $arch \
    --name "$prefix" \
    --description "$description" \
    $ebsopts \
    --snapshot "$snapshotid")
  echo "AMIBUILDER: NEW AMI REGISTERED: AMI ID=$newami, EBS ID=$volumeid, EBS SNAPSHOT ID=$snapshotid, PREFIX=$prefix, DESCRIPTION=$description"
  '
}

create_ebs_ami() {
  remote_variable_setup
  if [[ ! $AMIBUILDER_NO_BUILD_IMAGE = true ]] ; then
    build_image
  fi
  if [[ ! $AMIBUILDER_NO_CUSTOM_SETUP = true ]] && [[ -n $AMIBUILDER_CUSTOM_SETUP_URL ]] ; then
    custom_setup
  fi
  if [[ ! $AMIBUILDER_NO_COPY_IMAGE_TO_AMI = true ]] ; then
    copy_image_to_ami
  fi
}

terminate_instance() {
  if [[ ! $AMIBUILDER_NO_TERMINATE_INSTANCE = true ]] && [[ -n $instanceid ]] ; then
    echo "AMIBUILDER: terminating host $host on instance $instanceid"
    result=$(ec2-terminate-instances   \
      --private-key "$privatekey" \
      --cert "$cert" \
      "$instanceid")
    echo "AMIBUILDER: $result"
  else
    echo "AMIBUILDER: $host was NOT terminated."
  fi
}

run() {
  local arg_array i rc
  for arg; do
    arg_array[i++]=$(printf %q "$arg")
  done
  ssh -i $keypair ubuntu@$host "$@"
}

run_ignoring_error() {
  set +e
  $(run "$@")
  set -e
}

build() {
  if [[ -z $AMIBUILDER_HOST ]] ; then
    run_instance
    get_host
  else
    host=$AMIBUILDER_HOST
  fi
  variable_setup
  if [[ ! $AMIBUILDER_NO_UPLOAD_CREDENTIALS = true ]] ; then
    upload_credentials
  fi
  create_ebs_ami
  terminate_instance
}

config
if [[ ! $AMIBUILDER_NO_BUILD = true ]] ; then
  build
fi